{"version":3,"sources":["logo.svg","App.js","Repositories.js","RepositoryDetail.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","react_router_dom","to","Component","Repositories","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","callApi","asyncToGenerator","regenerator_default","mark","_callee","response","body","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","handleSubmit","_ref2","_callee2","e","_context2","preventDefault","method","headers","Content-Type","JSON","stringify","post","state","text","setState","responseToPost","_x","apply","arguments","_this2","then","res","catch","err","console","error","length","map","lang","language","repo","key","id","concat","full_name","RepositoryDetail","match","params","log","entries","i","_ref3","slicedToArray","value","_renderObject","Boolean","window","location","hostname","ReactDOM","render","react_router","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c92f9b4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h4 className=\"App-title\">Buscar Repositórios em Destaque</h4>\n          <button><Link to=\"/repositories\">Buscar Repositórios em Destaque</Link></button>\n        </header>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Link, Router } from 'react-router-dom';\n\nclass Repositories extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      response: []\n    }\n  }\n\n  componentDidMount() {\n\n    this.callApi()\n      .then(res => {\n        this.setState({ response: res })\n      })\n      .catch(err => console.error(err));\n  }\n\n  callApi = async() => {\n    const response = await fetch('/api/search/highlights-repositories');\n    const body = await response.json();\n\n    // const parsedResponse = JSON.parse(body.express);\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n\n    const body = await response.text();\n    this.setState({ responseToPost: body });\n  }\n  \n  render() {\n\n    if(this.state.response.length !== 0){\n      return (\n\n        <ul>\n          {this.state.response.map((lang) => \n            <ul>\n              { lang[0].language }\n              { lang.map(repo => \n                <li key={repo.id}>\n                    <Link to={`/repository-detail/${repo.id}`}>{repo.full_name}</Link>\n                </li>) }\n              <br></br>\n            </ul>\n            )}\n        </ul>\n      );\n    }\n    return <div></div>\n  }\n\n    // console.log(data)\n};\n\nexport default Repositories;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nclass RepositoryDetail extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      response: []\n    }\n  }\n\n  componentDidMount() {\n\n    this.callApi()\n      .then(res => {\n          console.log(res)\n        this.setState({ response: res })\n      })\n      .catch(err => console.error(err));\n  }\n\n    callApi = async() => {\n        const response = await fetch(`/api/repository-detail?id=${this.props.match.params.id}`);\n        const body = await response.json();\n        if (response.status !== 200) throw Error(body.message);\n        return body;\n    };\n\n    _renderObject(){\n        console.log(this.state.response)\n        return Object.entries(this.state.response).map(([key, value], i) => {\n            console.log(key, value)\n            return (\n                <ul>\n                    <div key={key}>\n                        <li>{key}: {value} ;</li>\n                    </div>\n                </ul>\n            )\n        })\n    }\n\n    render(){\n        if(this.state.response.length !== 0){\n\n            return(\n                <div>\n                    {this._renderObject()}\n                </div>\n            )\n        }\n        return <div></div>    \n}\n};\n\nexport default RepositoryDetail;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Repositories from './Repositories';\nimport RepositoryDetail from './RepositoryDetail';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter,  Switch, Route } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" exact={true} component={App} />\n            <Route path=\"/repositories\" component={Repositories} />\n            <Route path=\"/repository-detail/:id\" component={RepositoryDetail} />\n        </Switch>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}